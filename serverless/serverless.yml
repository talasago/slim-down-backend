service: slim-down

frameworkVersion: ">=1.82.0 <3.0.0"

plugins:
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: ap-northeast-1
  environment:
    DynamodbTableWeight: ${self:service}-weight-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DynamodbTableWeight}

functions:
  create:
    handler: create.create
    events:
      - http:
          path: /
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      DynamodbTableWeight: ${self:provider.environment.DynamodbTableWeight}

resources:
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      # スタック削除時テーブルを残す
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DynamodbTableWeight}
        AttributeDefinitions:
          -
            AttributeName: cognitoUserSub
            AttributeType: S
          -
            AttributeName: nextTotalingFlg
            AttributeType: B
        KeySchema:
          -
            AttributeName: cognitoUserSub
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        -
          IndexName: index-nextTotalingFlg
          KeySchema:
          -
            AttributeName: nextTotalingFlg
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ApiGatewayUserPoolAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          #TODO:ホントはcognitoのarnを取りに行く
          # - { Fn::GetAtt: [ApiGatewayWithAuthorizationUserPool, Arn] }
          - ${env:cognitoUserPoolArn}
